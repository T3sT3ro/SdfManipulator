using System.IO;
using me.tooster.sdf.Editor.API;
using UnityEditor;
using UnityEditor.AssetImporters;
using UnityEditor.ProjectWindowCallback;
using UnityEngine;

namespace me.tooster.sdf.Editor.NodeGraph {
    // https://medium.com/miijiis-unified-works/have-unity-support-your-custom-file-part-4-6-fc2ae4ec09c0
// see ShaderGraphImporter
    [ScriptedImporter(1, "sdfscene")]
    public class SdfSceneImporter : ScriptedImporter {
        public override void OnImportAsset(AssetImportContext ctx) {
            string path = ctx.assetPath;
            var assetName = Path.GetFileNameWithoutExtension(path);

            // TODO: deserialize Graph, Material and Shader, assigne to scane object SO
            // create Graph from serialized data 
            var graph = new Graph(assetName);
            var scene = SdfScene.CreateAsset(ctx, path, graph);
        }
    }

    public class SdfScene : ScriptableObject {
        public Graph    Graph    { get; private set; } = null!;
        public Material Material { get; private set; } = null!; // shader is generated by graph
        public Shader   Shader   => Material.shader;

        public static SdfScene CreateAsset(AssetImportContext ctx, string path, Graph graph) {
            var sceneAsset = ScriptableObject.CreateInstance<SdfScene>();

            sceneAsset.Graph = graph;
            var shader = ShaderUtil.CreateShaderAsset(ctx, sceneAsset.Graph.BuildActiveTarget(), false);
            var material = sceneAsset.Material = new Material(shader) { name = $"Material/{graph.DisplayName}" };

            ctx.AddObjectToAsset("Shader", shader);
            ctx.AddObjectToAsset("Material", material);
            ctx.AddObjectToAsset("SDF scene", sceneAsset);

            ctx.SetMainObject(sceneAsset);
            return sceneAsset;
        }

        // siilar to CreateShaderGraph
        [MenuItem("Assets/Create/SDF/Sdf Scene Asset")]
        private static void CreateAsset() {
            var graphItem = ScriptableObject.CreateInstance<CreateGraphAction>();
            ProjectWindowUtil.StartNameEditingIfProjectWindowExists(0,
                graphItem, "SDF Graph.sdf", null, null);
        }

        private class CreateGraphAction : EndNameEditAction {
            public override void Action(int instanceId, string pathName, string resourceFile) {
                var graph = new Graph(pathName);
                var text = JsonUtility.ToJson(graph);
                File.WriteAllText(pathName, text);
                AssetDatabase.Refresh();
                Object obj = AssetDatabase.LoadAssetAtPath<SdfScene>(pathName);
                Selection.activeObject = obj;
            }
        }
    }
}
