/*./Identifier.cs:                                   */namespace AST.Hlsl.Syntax                          { public partial record Identifier               { private readonly IdentifierToken                           _id;                   public IdentifierToken id                                      { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Lists.cs:                                        */namespace AST.Hlsl.Syntax                          { public partial record ArgumentList<T>          { private readonly OpenParenToken                            _openParenToken;       public OpenParenToken openParenToken                           { get => _openParenToken;      set => _openParenToken       = value with { Parent = this }; } public ArgumentList() { _openParenToken = new(); } } }
/*./Lists.cs:                                        */namespace AST.Hlsl.Syntax                          { public partial record ArgumentList<T>          { private readonly SeparatedList<Hlsl, T>                    _arguments;            public SeparatedList<Hlsl, T> arguments                        { get => _arguments;           set => _arguments            = value with { Parent = this }; } public ArgumentList() { _arguments = SeparatedList<Hlsl, T>.Empty; } } }
/*./Lists.cs:                                        */namespace AST.Hlsl.Syntax                          { public partial record ArgumentList<T>          { private readonly CloseParenToken                           _closeParenToken;      public CloseParenToken closeParenToken                         { get => _closeParenToken;     set => _closeParenToken      = value with { Parent = this }; } public ArgumentList() { _closeParenToken = new(); } } }
/*./Lists.cs:                                        */namespace AST.Hlsl.Syntax                          { public partial record BracedList<T>            { private readonly OpenBraceToken                            _openBraceToken;       public OpenBraceToken openBraceToken                           { get => _openBraceToken;      set => _openBraceToken       = value with { Parent = this }; } public BracedList() { _openBraceToken = new(); } } }
/*./Lists.cs:                                        */namespace AST.Hlsl.Syntax                          { public partial record BracedList<T>            { private readonly SeparatedList<Hlsl, T>                    _arguments;            public SeparatedList<Hlsl, T> arguments                        { get => _arguments;           set => _arguments            = value with { Parent = this }; } public BracedList() { _arguments = SeparatedList<Hlsl, T>.Empty; } } }
/*./Lists.cs:                                        */namespace AST.Hlsl.Syntax                          { public partial record BracedList<T>            { private readonly CloseBraceToken                           _closeBraceToken;      public CloseBraceToken closeBraceToken                         { get => _closeBraceToken;     set => _closeBraceToken      = value with { Parent = this }; } public BracedList() { _closeBraceToken = new(); } } }
/*./Semantic.cs:                                     */namespace AST.Hlsl.Syntax                          { public partial record Semantic                 { private readonly ColonToken                                _colonToken;           public ColonToken colonToken                                   { get => _colonToken;          set => _colonToken           = value with { Parent = this }; } public Semantic() { _colonToken = new(); } } }
/*./Semantic.cs:                                     */namespace AST.Hlsl.Syntax                          { public partial record Semantic                 { private readonly SemanticToken                             _semanticToken;        public SemanticToken semanticToken                             { get => _semanticToken;       set => _semanticToken        = value with { Parent = this }; } } }
/*./Statements/Initializer.cs:                       */namespace AST.Hlsl.Syntax.Statements               { public partial record Initializer              { private readonly EqualsToken                               _equalsToken;          public EqualsToken equalsToken                                 { get => _equalsToken;         set => _equalsToken          = value with { Parent = this }; } public Initializer() { _equalsToken = new(); } } }
/*./Statements/Initializer.cs:                       */namespace AST.Hlsl.Syntax.Statements               { public partial record Initializer              { private readonly Expression                                _value;                public Expression value                                        { get => _value;               set => _value                = value with { Parent = this }; } } }
/*./Statements/Switch.DefaultCase.cs:                */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch       { public partial record DefaultCase { private readonly DefaultKeyword                            _defaultKeyword;       public DefaultKeyword defaultKeyword                           { get => _defaultKeyword;      set => _defaultKeyword       = value with { Parent = this }; } public DefaultCase() { _defaultKeyword = new(); } } } }
/*./Statements/Switch.DefaultCase.cs:                */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch       { public partial record DefaultCase { private readonly ColonToken                                _colonToken;           public ColonToken colonToken                                   { get => _colonToken;          set => _colonToken           = value with { Parent = this }; } public DefaultCase() { _colonToken = new(); } } } }
/*./Statements/Switch.DefaultCase.cs:                */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch       { public partial record DefaultCase { private readonly SyntaxList<Hlsl, Statement>               _body;                 public SyntaxList<Hlsl, Statement> body                        { get => _body;                set => _body                 = value with { Parent = this }; } public DefaultCase() { _body = SyntaxList<Hlsl, Statement>.Empty; } } } }
/*./Statements/Break.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record Break                    { private readonly BreakKeyword                              _breakKeyword;         public BreakKeyword breakKeyword                               { get => _breakKeyword;        set => _breakKeyword         = value with { Parent = this }; } public Break() { _breakKeyword = new(); } } }
/*./Statements/Break.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record Break                    { private readonly SemiToken                                 _semiToken;            public SemiToken semiToken                                     { get => _semiToken;           set => _semiToken            = value with { Parent = this }; } public Break() { _semiToken = new(); } } }
/*./Statements/ExpressionStatement.cs:               */namespace AST.Hlsl.Syntax.Statements               { public partial record ExpressionStatement      { private readonly Expression?                               _expression;           public Expression? expression                                  { get => _expression;          set => _expression           = value with { Parent = this }; } } }
/*./Statements/ExpressionStatement.cs:               */namespace AST.Hlsl.Syntax.Statements               { public partial record ExpressionStatement      { private readonly SemiToken                                 _semiToken;            public SemiToken semiToken                                     { get => _semiToken;           set => _semiToken            = value with { Parent = this }; } public ExpressionStatement() { _semiToken = new(); } } }
/*./Statements/Discard.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record Discard                  { private readonly DiscardKeyword                            _discardKeyword;       public DiscardKeyword discardKeyword                           { get => _discardKeyword;      set => _discardKeyword       = value with { Parent = this }; } public Discard() { _discardKeyword = new(); } } }
/*./Statements/Discard.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record Discard                  { private readonly SemiToken                                 _semiToken;            public SemiToken semiToken                                     { get => _semiToken;           set => _semiToken            = value with { Parent = this }; } public Discard() { _semiToken = new(); } } }
/*./Statements/For.VariableInitializer.cs:           */namespace AST.Hlsl.Syntax.Statements               { public partial record For  { public partial record VariableInitializer { private readonly SeparatedList<Hlsl, AssignmentExpression> _initializers;         public SeparatedList<Hlsl, AssignmentExpression> initializers  { get => _initializers;        set => _initializers         = value with { Parent = this }; } } } }
/*./Statements/Switch.cs:                            */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch                   { private readonly SwitchKeyword                             _switchKeyword;        public SwitchKeyword switchKeyword                             { get => _switchKeyword;       set => _switchKeyword        = value with { Parent = this }; } public Switch() { _switchKeyword = new(); } } }
/*./Statements/Switch.cs:                            */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch                   { private readonly OpenParenToken                            _openParen;            public OpenParenToken openParen                                { get => _openParen;           set => _openParen            = value with { Parent = this }; } public Switch() { _openParen = new(); } } }
/*./Statements/Switch.cs:                            */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch                   { private readonly Identifier                                _selector;             public Identifier selector                                     { get => _selector;            set => _selector             = value with { Parent = this }; } } }
/*./Statements/Switch.cs:                            */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch                   { private readonly CloseParenToken                           _closeParen;           public CloseParenToken closeParen                              { get => _closeParen;          set => _closeParen           = value with { Parent = this }; } public Switch() { _closeParen = new(); } } }
/*./Statements/Switch.cs:                            */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch                   { private readonly SyntaxList<Hlsl, Case>                    _cases;                public SyntaxList<Hlsl, Case> cases                            { get => _cases;               set => _cases                = value with { Parent = this }; } public Switch() { _cases = SyntaxList<Hlsl, Case>.Empty; } } }
/*./Statements/Declarations/StructDeclaration.cs:    */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record StructDeclaration        { private readonly Type.Struct                               _shape;                public Type.Struct shape                                       { get => _shape;               set => _shape                = value with { Parent = this }; } } }
/*./Statements/Declarations/StructDeclaration.cs:    */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record StructDeclaration        { private readonly SemiToken                                 _semicolon;            public SemiToken semicolon                                     { get => _semicolon;           set => _semicolon            = value with { Parent = this }; } public StructDeclaration() { _semicolon = new(); } } }
/*./Statements/Declarations/VariableDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record VariableDeclaration      { private readonly VariableDeclarator                        _declarator;           public VariableDeclarator declarator                           { get => _declarator;          set => _declarator           = value with { Parent = this }; } } }
/*./Statements/Declarations/VariableDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record VariableDeclaration      { private readonly SemiToken                                 _semiToken;            public SemiToken semiToken                                     { get => _semiToken;           set => _semiToken            = value with { Parent = this }; } public VariableDeclaration() { _semiToken = new(); } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Type                                      _returnType;           public Type returnType                                         { get => _returnType;          set => _returnType           = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly ArgumentList<Parameter>                   _paramList;            public ArgumentList<Parameter> paramList                       { get => _paramList;           set => _paramList            = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Semantic?                                 _returnSemantic;       public Semantic? returnSemantic                                { get => _returnSemantic;      set => _returnSemantic       = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Block                                     _body;                 public Block body                                              { get => _body;                set => _body                 = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Token<Hlsl>?                              _modifier;             public Token<Hlsl>? modifier                                   { get => _modifier;            set => _modifier             = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Type                                      _type;                 public Type type                                               { get => _type;                set => _type                 = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Semantic?                                 _semantic;             public Semantic? semantic                                      { get => _semantic;            set => _semantic             = value with { Parent = this }; } } }
/*./Statements/Declarations/FunctionDeclaration.cs:  */namespace AST.Hlsl.Syntax.Statements.Declarations  { public partial record FunctionDeclaration      { private readonly Expression?                               _initializer;          public Expression? initializer                                 { get => _initializer;         set => _initializer          = value with { Parent = this }; } } }
/*./Statements/If.ElseClause.cs:                     */namespace AST.Hlsl.Syntax.Statements               { public partial record If            { public partial record ElseClause { private readonly ElseKeyword                               _elseKeyword;          public ElseKeyword elseKeyword                                 { get => _elseKeyword;         set => _elseKeyword          = value with { Parent = this }; } public ElseClause() { _elseKeyword = new(); } } } }
/*./Statements/If.ElseClause.cs:                     */namespace AST.Hlsl.Syntax.Statements               { public partial record If            { public partial record ElseClause { private readonly Statement                                 _statement;            public Statement statement                                     { get => _statement;           set => _statement            = value with { Parent = this }; } } } }
/*./Statements/If.cs:                                */namespace AST.Hlsl.Syntax.Statements               { public partial record If                       { private readonly IfKeyword                                 _ifKeyword;            public IfKeyword ifKeyword                                     { get => _ifKeyword;           set => _ifKeyword            = value with { Parent = this }; } public If() { _ifKeyword = new(); } } }
/*./Statements/If.cs:                                */namespace AST.Hlsl.Syntax.Statements               { public partial record If                       { private readonly OpenParenToken                            _openParen;            public OpenParenToken openParen                                { get => _openParen;           set => _openParen            = value with { Parent = this }; } public If() { _openParen = new(); } } }
/*./Statements/If.cs:                                */namespace AST.Hlsl.Syntax.Statements               { public partial record If                       { private readonly Expression                                _test;                 public Expression test                                         { get => _test;                set => _test                 = value with { Parent = this }; } } }
/*./Statements/If.cs:                                */namespace AST.Hlsl.Syntax.Statements               { public partial record If                       { private readonly CloseParenToken                           _closeParen;           public CloseParenToken closeParen                              { get => _closeParen;          set => _closeParen           = value with { Parent = this }; } public If() { _closeParen = new(); } } }
/*./Statements/If.cs:                                */namespace AST.Hlsl.Syntax.Statements               { public partial record If                       { private readonly Statement                                 _then;                 public Statement then                                          { get => _then;                set => _then                 = value with { Parent = this }; } } }
/*./Statements/If.cs:                                */namespace AST.Hlsl.Syntax.Statements               { public partial record If                       { private readonly ElseClause?                               _elseClause;           public ElseClause? elseClause                                  { get => _elseClause;          set => _elseClause           = value with { Parent = this }; } } }
/*./Statements/Switch.Case.cs:                       */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch              { public partial record Case { private readonly CaseKeyword                               _caseKeyword;          public CaseKeyword caseKeyword                                 { get => _caseKeyword;         set => _caseKeyword          = value with { Parent = this }; } public Case() { _caseKeyword = new(); } } } }
/*./Statements/Switch.Case.cs:                       */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch              { public partial record Case { private readonly IntLiteral                                _label;                public IntLiteral label                                        { get => _label;               set => _label                = value with { Parent = this }; } } } }
/*./Statements/Switch.Case.cs:                       */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch              { public partial record Case { private readonly ColonToken                                _colonToken;           public ColonToken colonToken                                   { get => _colonToken;          set => _colonToken           = value with { Parent = this }; } public Case() { _colonToken = new(); } } } }
/*./Statements/Switch.Case.cs:                       */namespace AST.Hlsl.Syntax.Statements               { public partial record Switch              { public partial record Case { private readonly SyntaxList<Hlsl, Statement>               _body;                 public SyntaxList<Hlsl, Statement> body                        { get => _body;                set => _body                 = value with { Parent = this }; } public Case() { _body = SyntaxList<Hlsl, Statement>.Empty; } } } }
/*./Statements/Continue.cs:                          */namespace AST.Hlsl.Syntax.Statements               { public partial record Continue                 { private readonly ContinueKeyword                           _continueKeyword;      public ContinueKeyword continueKeyword                         { get => _continueKeyword;     set => _continueKeyword      = value with { Parent = this }; } public Continue() { _continueKeyword = new(); } } }
/*./Statements/Continue.cs:                          */namespace AST.Hlsl.Syntax.Statements               { public partial record Continue                 { private readonly SemiToken                                 _semiToken;            public SemiToken semiToken                                     { get => _semiToken;           set => _semiToken            = value with { Parent = this }; } public Continue() { _semiToken = new(); } } }
/*./Statements/Block.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record Block                    { private readonly OpenBraceToken                            _openBraceToken;       public OpenBraceToken openBraceToken                           { get => _openBraceToken;      set => _openBraceToken       = value with { Parent = this }; } public Block() { _openBraceToken = new(); } } }
/*./Statements/Block.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record Block                    { private readonly SyntaxList<Hlsl, Statement>               _statements;           public SyntaxList<Hlsl, Statement> statements                  { get => _statements;          set => _statements           = value with { Parent = this }; } public Block() { _statements = SyntaxList<Hlsl, Statement>.Empty; } } }
/*./Statements/Block.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record Block                    { private readonly CloseBraceToken                           _closeBraceToken;      public CloseBraceToken closeBraceToken                         { get => _closeBraceToken;     set => _closeBraceToken      = value with { Parent = this }; } public Block() { _closeBraceToken = new(); } } }
/*./Statements/While.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record While                    { private readonly WhileKeyword                              _whileKeyword;         public WhileKeyword whileKeyword                               { get => _whileKeyword;        set => _whileKeyword         = value with { Parent = this }; } public While() { _whileKeyword = new(); } } }
/*./Statements/While.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record While                    { private readonly OpenParenToken                            _openParen;            public OpenParenToken openParen                                { get => _openParen;           set => _openParen            = value with { Parent = this }; } public While() { _openParen = new(); } } }
/*./Statements/While.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record While                    { private readonly Expression                                _test;                 public Expression test                                         { get => _test;                set => _test                 = value with { Parent = this }; } } }
/*./Statements/While.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record While                    { private readonly CloseParenToken                           _closeParen;           public CloseParenToken closeParen                              { get => _closeParen;          set => _closeParen           = value with { Parent = this }; } public While() { _closeParen = new(); } } }
/*./Statements/While.cs:                             */namespace AST.Hlsl.Syntax.Statements               { public partial record While                    { private readonly Statement                                 _body;                 public Statement body                                          { get => _body;                set => _body                 = value with { Parent = this }; } } }
/*./Statements/Return.cs:                            */namespace AST.Hlsl.Syntax.Statements               { public partial record Return                   { private readonly ReturnKeyword                             _returnKeyword;        public ReturnKeyword returnKeyword                             { get => _returnKeyword;       set => _returnKeyword        = value with { Parent = this }; } public Return() { _returnKeyword = new(); } } }
/*./Statements/Return.cs:                            */namespace AST.Hlsl.Syntax.Statements               { public partial record Return                   { private readonly Expression?                               _expression;           public Expression? expression                                  { get => _expression;          set => _expression           = value with { Parent = this }; } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly ForKeyword                                _forKeyword;           public ForKeyword forKeyword                                   { get => _forKeyword;          set => _forKeyword           = value with { Parent = this }; } public For() { _forKeyword = new(); } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly OpenParenToken                            _openParen;            public OpenParenToken openParen                                { get => _openParen;           set => _openParen            = value with { Parent = this }; } public For() { _openParen = new(); } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly Initializer?                              _initializer;          public Initializer? initializer                                { get => _initializer;         set => _initializer          = value with { Parent = this }; } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly SemiToken                                 _firstSemiToken;       public SemiToken firstSemiToken                                { get => _firstSemiToken;      set => _firstSemiToken       = value with { Parent = this }; } public For() { _firstSemiToken = new(); } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly Expression?                               _condition;            public Expression? condition                                   { get => _condition;           set => _condition            = value with { Parent = this }; } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly SemiToken                                 _secondSemiToken;      public SemiToken secondSemiToken                               { get => _secondSemiToken;     set => _secondSemiToken      = value with { Parent = this }; } public For() { _secondSemiToken = new(); } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly SeparatedList<Hlsl, Expression>?          _increments;           public SeparatedList<Hlsl, Expression>? increments             { get => _increments;          set => _increments           = value with { Parent = this }; } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly CloseParenToken                           _closeParen;           public CloseParenToken closeParen                              { get => _closeParen;          set => _closeParen           = value with { Parent = this }; } public For() { _closeParen = new(); } } }
/*./Statements/For.cs:                               */namespace AST.Hlsl.Syntax.Statements               { public partial record For                      { private readonly Statement                                 _body;                 public Statement body                                          { get => _body;                set => _body                 = value with { Parent = this }; } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly DoKeyword                                 _doKeyword;            public DoKeyword doKeyword                                     { get => _doKeyword;           set => _doKeyword            = value with { Parent = this }; } public DoWhile() { _doKeyword = new(); } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly OpenBraceToken                            _openBraceToken;       public OpenBraceToken openBraceToken                           { get => _openBraceToken;      set => _openBraceToken       = value with { Parent = this }; } public DoWhile() { _openBraceToken = new(); } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly Statement                                 _body;                 public Statement body                                          { get => _body;                set => _body                 = value with { Parent = this }; } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly CloseBraceToken                           _closeBraceToken;      public CloseBraceToken closeBraceToken                         { get => _closeBraceToken;     set => _closeBraceToken      = value with { Parent = this }; } public DoWhile() { _closeBraceToken = new(); } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly WhileKeyword                              _whileKeyword;         public WhileKeyword whileKeyword                               { get => _whileKeyword;        set => _whileKeyword         = value with { Parent = this }; } public DoWhile() { _whileKeyword = new(); } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly OpenParenToken                            _openParenToken;       public OpenParenToken openParenToken                           { get => _openParenToken;      set => _openParenToken       = value with { Parent = this }; } public DoWhile() { _openParenToken = new(); } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly Expression                                _test;                 public Expression test                                         { get => _test;                set => _test                 = value with { Parent = this }; } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly CloseParenToken                           _closeParenToken;      public CloseParenToken closeParenToken                         { get => _closeParenToken;     set => _closeParenToken      = value with { Parent = this }; } public DoWhile() { _closeParenToken = new(); } } }
/*./Statements/DoWhile.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record DoWhile                  { private readonly SemiToken                                 _semicolonToken;       public SemiToken semicolonToken                                { get => _semicolonToken;      set => _semicolonToken       = value with { Parent = this }; } public DoWhile() { _semicolonToken = new(); } } }
/*./Statements/Typedef.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record Typedef                  { private readonly TypedefKeyword                            _typedefKeyword;       public TypedefKeyword typedefKeyword                           { get => _typedefKeyword;      set => _typedefKeyword       = value with { Parent = this }; } public Typedef() { _typedefKeyword = new(); } } }
/*./Statements/Typedef.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record Typedef                  { private readonly Type                                      _type;                 public Type type                                               { get => _type;                set => _type                 = value with { Parent = this }; } } }
/*./Statements/Typedef.cs:                           */namespace AST.Hlsl.Syntax.Statements               { public partial record Typedef                  { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Trivias/PreprocessorDirectives.cs:               */namespace AST.Hlsl.Syntax.Trivias                  { public partial record PreprocessorDirectives   { private readonly PreprocessorSyntax                        _triviaSyntax;         public PreprocessorSyntax triviaSyntax                         { get => _triviaSyntax;        set => _triviaSyntax         = value with { Parent = this }; } } }
/*./Expressions/LiteralExpression.cs:                */namespace AST.Hlsl.Syntax.Expressions              { public partial record LiteralExpression        { private readonly T                                         _literal;              public T literal                                               { get => _literal;             set => _literal              = value with { Parent = this }; } } }
/*./Expressions/Operators/Ternary.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Ternary                  { private readonly Expression                                _condition;            public Expression condition                                    { get => _condition;           set => _condition            = value with { Parent = this }; } } }
/*./Expressions/Operators/Ternary.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Ternary                  { private readonly QuestionToken                             _questionToken;        public QuestionToken questionToken                             { get => _questionToken;       set => _questionToken        = value with { Parent = this }; } public Ternary() { _questionToken = new(); } } }
/*./Expressions/Operators/Ternary.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Ternary                  { private readonly Expression                                _whenTrue;             public Expression whenTrue                                     { get => _whenTrue;            set => _whenTrue             = value with { Parent = this }; } } }
/*./Expressions/Operators/Ternary.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Ternary                  { private readonly ColonToken                                _colonToken;           public ColonToken colonToken                                   { get => _colonToken;          set => _colonToken           = value with { Parent = this }; } public Ternary() { _colonToken = new(); } } }
/*./Expressions/Operators/Ternary.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Ternary                  { private readonly Expression                                _whenFalse;            public Expression whenFalse                                    { get => _whenFalse;           set => _whenFalse            = value with { Parent = this }; } } }
/*./Expressions/Operators/Comma.cs:                  */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Comma                    { private readonly Expression                                _left;                 public Expression left                                         { get => _left;                set => _left                 = value with { Parent = this }; } } }
/*./Expressions/Operators/Comma.cs:                  */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Comma                    { private readonly CommaToken                                _comma;                public CommaToken comma                                        { get => _comma;               set => _comma                = value with { Parent = this }; } public Comma() { _comma = new(); } } }
/*./Expressions/Operators/Comma.cs:                  */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Comma                    { private readonly Expression                                _right;                public Expression right                                        { get => _right;               set => _right                = value with { Parent = this }; } } }
/*./Expressions/Operators/Indexer.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Indexer                  { private readonly Expression                                _expression;           public Expression expression                                   { get => _expression;          set => _expression           = value with { Parent = this }; } } }
/*./Expressions/Operators/Indexer.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Indexer                  { private readonly OpenBracketToken                          _openBracketToken;     public OpenBracketToken openBracketToken                       { get => _openBracketToken;    set => _openBracketToken     = value with { Parent = this }; } public Indexer() { _openBracketToken = new(); } } }
/*./Expressions/Operators/Indexer.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Indexer                  { private readonly Expression                                _index;                public Expression index                                        { get => _index;               set => _index                = value with { Parent = this }; } } }
/*./Expressions/Operators/Indexer.cs:                */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Indexer                  { private readonly CloseBracketToken                         _closeBracketToken;    public CloseBracketToken closeBracketToken                     { get => _closeBracketToken;   set => _closeBracketToken    = value with { Parent = this }; } public Indexer() { _closeBracketToken = new(); } } }
/*./Expressions/Operators/Cast.cs:                   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Cast                     { private readonly OpenParenToken                            _openParenToken;       public OpenParenToken openParenToken                           { get => _openParenToken;      set => _openParenToken       = value with { Parent = this }; } public Cast() { _openParenToken = new(); } } }
/*./Expressions/Operators/Cast.cs:                   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Cast                     { private readonly Type                                      _type;                 public Type type                                               { get => _type;                set => _type                 = value with { Parent = this }; } } }
/*./Expressions/Operators/Cast.cs:                   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Cast                     { private readonly SyntaxList<Hlsl, ArrayRank>               _arrayRankSpecifiers;  public SyntaxList<Hlsl, ArrayRank> arrayRankSpecifiers         { get => _arrayRankSpecifiers; set => _arrayRankSpecifiers  = value with { Parent = this }; } public Cast() { _arrayRankSpecifiers = SyntaxList<Hlsl, ArrayRank>.Empty; } } }
/*./Expressions/Operators/Cast.cs:                   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Cast                     { private readonly CloseParenToken                           _closeParenToken;      public CloseParenToken closeParenToken                         { get => _closeParenToken;     set => _closeParenToken      = value with { Parent = this }; } public Cast() { _closeParenToken = new(); } } }
/*./Expressions/Operators/Cast.cs:                   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Cast                     { private readonly Expression                                _expression;           public Expression expression                                   { get => _expression;          set => _expression           = value with { Parent = this }; } } }
/*./Expressions/Operators/Binary.cs:                 */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Binary                   { private readonly Expression                                _left;                 public Expression left                                         { get => _left;                set => _left                 = value with { Parent = this }; } } }
/*./Expressions/Operators/Binary.cs:                 */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Binary                   { private readonly Token<Hlsl>                               _operatorToken;        public Token<Hlsl> operatorToken                               { get => _operatorToken;       set => _operatorToken        = value with { Parent = this }; } } }
/*./Expressions/Operators/Binary.cs:                 */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Binary                   { private readonly Expression                                _right;                public Expression right                                        { get => _right;               set => _right                = value with { Parent = this }; } } }
/*./Expressions/Operators/Call.cs:                   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Call                     { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Expressions/Operators/Call.cs:                   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Call                     { private readonly ArgumentList<Syntax<Hlsl>>                _argList;              public ArgumentList<Syntax<Hlsl>> argList                      { get => _argList;             set => _argList              = value with { Parent = this }; } } }
/*./Expressions/Operators/AssignmentExpression.cs:   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record AssignmentExpression     { private readonly Expression                                _left;                 public Expression left                                         { get => _left;                set => _left                 = value with { Parent = this }; } } }
/*./Expressions/Operators/AssignmentExpression.cs:   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record AssignmentExpression     { private readonly AssignmentToken                           _assignmentToken;      public AssignmentToken assignmentToken                         { get => _assignmentToken;     set => _assignmentToken      = value with { Parent = this }; } public AssignmentExpression() { _assignmentToken = new EqualsToken(); } } }
/*./Expressions/Operators/AssignmentExpression.cs:   */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record AssignmentExpression     { private readonly Expression                                _right;                public Expression right                                        { get => _right;               set => _right                = value with { Parent = this }; } } }
/*./Expressions/Operators/Member.cs:                 */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Member                   { private readonly Expression                                _expression;           public Expression expression                                   { get => _expression;          set => _expression           = value with { Parent = this }; } } }
/*./Expressions/Operators/Member.cs:                 */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Member                   { private readonly DotToken                                  _dotToken;             public DotToken dotToken                                       { get => _dotToken;            set => _dotToken             = value with { Parent = this }; } public Member() { _dotToken = new(); } } }
/*./Expressions/Operators/Member.cs:                 */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Member                   { private readonly Identifier                                _member;               public Identifier member                                       { get => _member;              set => _member               = value with { Parent = this }; } } }
/*./Expressions/Operators/Affix.cs:                  */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Affix                    { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Expressions/Operators/Affix.cs:                  */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Affix                    { private readonly AffixOperatorToken                        _prefixOperator;       public AffixOperatorToken prefixOperator                       { get => _prefixOperator;      set => _prefixOperator       = value with { Parent = this }; } } }
/*./Expressions/Operators/Affix.cs:                  */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Affix                    { private readonly AffixOperatorToken                        _suffixOperator;       public AffixOperatorToken suffixOperator                       { get => _suffixOperator;      set => _suffixOperator       = value with { Parent = this }; } } }
/*./Expressions/Operators/Unary.cs:                  */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Unary                    { private readonly Token<Hlsl>                               _operatorToken;        public Token<Hlsl> operatorToken                               { get => _operatorToken;       set => _operatorToken        = value with { Parent = this }; } } }
/*./Expressions/Operators/Unary.cs:                  */namespace AST.Hlsl.Syntax.Expressions.Operators    { public partial record Unary                    { private readonly Expression                                _expression;           public Expression expression                                   { get => _expression;          set => _expression           = value with { Parent = this }; } } }
/*./Expressions/StructInitializer.cs:                */namespace AST.Hlsl.Syntax.Expressions              { public partial record StructInitializer        { private readonly BracedList<Expression>                    _components;           public BracedList<Expression> components                       { get => _components;          set => _components           = value with { Parent = this }; } public StructInitializer() { _components = new(); } } }
/*./Expressions/Parenthesized.cs:                    */namespace AST.Hlsl.Syntax.Expressions              { public partial record Parenthesized            { private readonly OpenParenToken                            _openParen;            public OpenParenToken openParen                                { get => _openParen;           set => _openParen            = value with { Parent = this }; } public Parenthesized() { _openParen = new(); } } }
/*./Expressions/Parenthesized.cs:                    */namespace AST.Hlsl.Syntax.Expressions              { public partial record Parenthesized            { private readonly Expression                                _expression;           public Expression expression                                   { get => _expression;          set => _expression           = value with { Parent = this }; } } }
/*./Expressions/Parenthesized.cs:                    */namespace AST.Hlsl.Syntax.Expressions              { public partial record Parenthesized            { private readonly CloseParenToken                           _closeParen;           public CloseParenToken closeParen                              { get => _closeParen;          set => _closeParen           = value with { Parent = this }; } public Parenthesized() { _closeParen = new(); } } }
/*./VariableDeclarator.cs:                           */namespace AST.Hlsl.Syntax                          { public partial record VariableDeclarator       { private readonly Token<Hlsl>?                              _storageKeyword;       public Token<Hlsl>? storageKeyword                             { get => _storageKeyword;      set => _storageKeyword       = value with { Parent = this }; } } }
/*./VariableDeclarator.cs:                           */namespace AST.Hlsl.Syntax                          { public partial record VariableDeclarator       { private readonly Token<Hlsl>?                              _typeModifier;         public Token<Hlsl>? typeModifier                               { get => _typeModifier;        set => _typeModifier         = value with { Parent = this }; } } }
/*./VariableDeclarator.cs:                           */namespace AST.Hlsl.Syntax                          { public partial record VariableDeclarator       { private readonly Type                                      _type;                 public Type type                                               { get => _type;                set => _type                 = value with { Parent = this }; } } }
/*./VariableDeclarator.cs:                           */namespace AST.Hlsl.Syntax                          { public partial record VariableDeclarator       { private readonly SeparatedList<Hlsl, VariableDefinition>   _variables;            public SeparatedList<Hlsl, VariableDefinition> variables       { get => _variables;           set => _variables            = value with { Parent = this }; } } }
/*./VariableDeclarator.cs:                           */namespace AST.Hlsl.Syntax                          { public partial record VariableDeclarator       { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./VariableDeclarator.cs:                           */namespace AST.Hlsl.Syntax                          { public partial record VariableDeclarator       { private readonly SyntaxList<Hlsl, ArrayRank>?              _arraySizes;           public SyntaxList<Hlsl, ArrayRank>? arraySizes                 { get => _arraySizes;          set => _arraySizes           = value with { Parent = this }; } } }
/*./VariableDeclarator.cs:                           */namespace AST.Hlsl.Syntax                          { public partial record VariableDeclarator       { private readonly Semantic?                                 _semantic;             public Semantic? semantic                                      { get => _semantic;            set => _semantic             = value with { Parent = this }; } } }
/*./VariableDeclarator.cs:                           */namespace AST.Hlsl.Syntax                          { public partial record VariableDeclarator       { private readonly Initializer?                              _initializer;          public Initializer? initializer                                { get => _initializer;         set => _initializer          = value with { Parent = this }; } } }
/*./ArrayRank.cs:                                    */namespace AST.Hlsl.Syntax                          { public partial record ArrayRank                { private readonly OpenBracketToken                          _openBracketToken;     public OpenBracketToken openBracketToken                       { get => _openBracketToken;    set => _openBracketToken     = value with { Parent = this }; } } }
/*./ArrayRank.cs:                                    */namespace AST.Hlsl.Syntax                          { public partial record ArrayRank                { private readonly LiteralExpression<IntLiteral>             _dimension;            public LiteralExpression<IntLiteral> dimension                 { get => _dimension;           set => _dimension            = value with { Parent = this }; } } }
/*./ArrayRank.cs:                                    */namespace AST.Hlsl.Syntax                          { public partial record ArrayRank                { private readonly CloseBracketToken                         _closeBracketToken;    public CloseBracketToken closeBracketToken                     { get => _closeBracketToken;   set => _closeBracketToken    = value with { Parent = this }; } public ArrayRank() { _closeBracketToken = new(); } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly StructKeyword                             _structKeyword;        public StructKeyword structKeyword                             { get => _structKeyword;       set => _structKeyword        = value with { Parent = this }; } public Struct() { _structKeyword = new(); } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly Identifier?                               _name;                 public Identifier? name                                        { get => _name;                set => _name                 = value with { Parent = this }; } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly OpenBraceToken                            _openBrace;            public OpenBraceToken openBrace                                { get => _openBrace;           set => _openBrace            = value with { Parent = this }; } public Struct() { _openBrace = new(); } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly SyntaxList<Hlsl, Member>                  _members;              public SyntaxList<Hlsl, Member> members                        { get => _members;             set => _members              = value with { Parent = this }; } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly CloseBraceToken                           _closeBrace;           public CloseBraceToken closeBrace                              { get => _closeBrace;          set => _closeBrace           = value with { Parent = this }; } public Struct() { _closeBrace = new(); } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly Token<Hlsl>?                              _interpolation;        public Token<Hlsl>? interpolation                              { get => _interpolation;       set => _interpolation        = value with { Parent = this }; } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly Type                                      _type;                 public Type type                                               { get => _type;                set => _type                 = value with { Parent = this }; } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly Semantic?                                 _semantic;             public Semantic? semantic                                      { get => _semantic;            set => _semantic             = value with { Parent = this }; } } } }
/*./Type.Struct.cs:                                  */namespace AST.Hlsl.Syntax                          { public partial record Type              { public partial record Struct { private readonly SemiToken                                 _semicolon;            public SemiToken semicolon                                     { get => _semicolon;           set => _semicolon            = value with { Parent = this }; } public Struct() { _semicolon = new(); } } } }
/*./Type.Predefined.cs:                              */namespace AST.Hlsl.Syntax                          { public partial record Type          { public partial record Predefined { private readonly PredefinedTypeToken                       _typeToken;            public PredefinedTypeToken typeToken                           { get => _typeToken;           set => _typeToken            = value with { Parent = this }; } } } }
/*./Type.UserDefined.cs:                             */namespace AST.Hlsl.Syntax                          { public partial record Type         { public partial record UserDefined { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } } }
/*./Preprocessor/Line.cs:                            */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Line                     { private readonly LineKeyword                               _lineKeyword;          public LineKeyword lineKeyword                                 { get => _lineKeyword;         set => _lineKeyword          = value with { Parent = this }; } public Line() { _lineKeyword = new(); } } }
/*./Preprocessor/Line.cs:                            */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Line                     { private readonly IntLiteral                                _lineNumber;           public IntLiteral lineNumber                                   { get => _lineNumber;          set => _lineNumber           = value with { Parent = this }; } } }
/*./Preprocessor/Line.cs:                            */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Line                     { private readonly QuotedStringLiteral?                      _file;                 public QuotedStringLiteral? file                               { get => _file;                set => _file                 = value with { Parent = this }; } } }
/*./Preprocessor/Ifndef.cs:                          */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Ifndef                   { private readonly IfndefKeyword                             _ifndefKeyword;        public IfndefKeyword ifndefKeyword                             { get => _ifndefKeyword;       set => _ifndefKeyword        = value with { Parent = this }; } public Ifndef() { _ifndefKeyword = new(); } } }
/*./Preprocessor/Ifndef.cs:                          */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Ifndef                   { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Preprocessor/Include.cs:                         */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Include                  { private readonly IncludePreprocessorKeyword                _includeKeyword;       public IncludePreprocessorKeyword includeKeyword               { get => _includeKeyword;      set => _includeKeyword       = value with { Parent = this }; } } }
/*./Preprocessor/Include.cs:                         */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Include                  { private readonly QuotedStringLiteral                       _filepath;             public QuotedStringLiteral filepath                            { get => _filepath;            set => _filepath             = value with { Parent = this }; } } }
/*./Preprocessor/Undef.cs:                           */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Undef                    { private readonly UndefKeyword                              _undefKeyword;         public UndefKeyword undefKeyword                               { get => _undefKeyword;        set => _undefKeyword         = value with { Parent = this }; } public Undef() { _undefKeyword = new(); } } }
/*./Preprocessor/Undef.cs:                           */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Undef                    { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Preprocessor/Define.cs:                          */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Define                   { private readonly DefineKeyword                             _defineKeyword;        public DefineKeyword defineKeyword                             { get => _defineKeyword;       set => _defineKeyword        = value with { Parent = this }; } public Define() { _defineKeyword = new(); } } }
/*./Preprocessor/Define.cs:                          */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Define                   { private readonly ArgumentList<Identifier>?                 _argList;              public ArgumentList<Identifier>? argList                       { get => _argList;             set => _argList              = value with { Parent = this }; } public Define() { _argList = new() { arguments = SeparatedList<Hlsl, Identifier>.Empty }; } } }
/*./Preprocessor/Define.cs:                          */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Define                   { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Preprocessor/Define.cs:                          */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Define                   { private readonly TokenString                               _tokenString;          public TokenString tokenString                                 { get => _tokenString;         set => _tokenString          = value with { Parent = this }; } } }
/*./Preprocessor/If.cs:                              */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record If                       { private readonly IfKeyword                                 _ifKeyword;            public IfKeyword ifKeyword                                     { get => _ifKeyword;           set => _ifKeyword            = value with { Parent = this }; } public If() { _ifKeyword = new(); } } }
/*./Preprocessor/If.cs:                              */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record If                       { private readonly TokenString                               _condition;            public TokenString condition                                   { get => _condition;           set => _condition            = value with { Parent = this }; } } }
/*./Preprocessor/Else.cs:                            */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Else                     { private readonly ElseKeyword                               _elseKeyword;          public ElseKeyword elseKeyword                                 { get => _elseKeyword;         set => _elseKeyword          = value with { Parent = this }; } public Else() { _elseKeyword = new(); } } }
/*./Preprocessor/Elif.cs:                            */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Elif                     { private readonly ElifKeyword                               _elifKeyword;          public ElifKeyword elifKeyword                                 { get => _elifKeyword;         set => _elifKeyword          = value with { Parent = this }; } public Elif() { _elifKeyword = new(); } } }
/*./Preprocessor/Elif.cs:                            */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Elif                     { private readonly TokenString                               _condition;            public TokenString condition                                   { get => _condition;           set => _condition            = value with { Parent = this }; } } }
/*./Preprocessor/Error.cs:                           */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Error                    { private readonly ErrorKeyword                              _errorKeyword;         public ErrorKeyword errorKeyword                               { get => _errorKeyword;        set => _errorKeyword         = value with { Parent = this }; } public Error() { _errorKeyword = new(); } } }
/*./Preprocessor/Error.cs:                           */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Error                    { private readonly TokenString                               _tokenstring;          public TokenString tokenstring                                 { get => _tokenstring;         set => _tokenstring          = value with { Parent = this }; } } }
/*./Preprocessor/Ifdef.cs:                           */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Ifdef                    { private readonly IfdefKeyword                              _ifdefKeyword;         public IfdefKeyword ifdefKeyword                               { get => _ifdefKeyword;        set => _ifdefKeyword         = value with { Parent = this }; } public Ifdef() { _ifdefKeyword = new(); } } }
/*./Preprocessor/Ifdef.cs:                           */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Ifdef                    { private readonly Identifier                                _id;                   public Identifier id                                           { get => _id;                  set => _id                   = value with { Parent = this }; } } }
/*./Preprocessor/Endif.cs:                           */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Endif                    { private readonly EndIfKeyword                              _endifKeyword;         public EndIfKeyword endifKeyword                               { get => _endifKeyword;        set => _endifKeyword         = value with { Parent = this }; } public Endif() { _endifKeyword = new(); } } }
/*./Preprocessor/Pragma.cs:                          */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Pragma                   { private readonly PragmaKeyword                             _pragmaKeyword;        public PragmaKeyword pragmaKeyword                             { get => _pragmaKeyword;       set => _pragmaKeyword        = value with { Parent = this }; } public Pragma() { _pragmaKeyword = new(); } } }
/*./Preprocessor/Pragma.cs:                          */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record Pragma                   { private readonly TokenString?                              _tokenString;          public TokenString? tokenString                                { get => _tokenString;         set => _tokenString          = value with { Parent = this }; } } }
/*./Preprocessor/PreprocessorSyntax.cs:              */namespace AST.Hlsl.Syntax.Preprocessor             { public partial record PreprocessorSyntax       { private readonly HashToken                                 _hashToken;            public HashToken hashToken                                     { get => _hashToken;           set => _hashToken            = value with { Parent = this }; } public PreprocessorSyntax() { _hashToken = new(); } } }